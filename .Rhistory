q5()
?read.fwf
source('~/Coursera/GetDataQuiz2.R')
q5()
source('~/Coursera/GetDataQuiz2.R')
q5()
source('~/Coursera/GetDataQuiz2.R')
q5()
source('~/Coursera/GetDataQuiz2.R')
source('~/Coursera/GetDataQuiz2.R')
q5()
source('~/Coursera/GetDataQuiz2.R')
q5()
source('~/Coursera/GetDataQuiz2.R')
q5()
source('~/Coursera/GetDataQuiz2.R')
q5()
source('~/Coursera/GetDataQuiz2.R')
q5()
source('~/Coursera/GetDataQuiz2.R')
q5()
source('~/Coursera/GetDataQuiz2.R')
q5()
source('~/Coursera/GetDataQuiz2.R')
q5()
source('~/Coursera/GetDataQuiz2.R')
q5()
?sum
x[4]
source('~/Coursera/GetDataQuiz2.R')
q5()
source('~/Coursera/GetDataQuiz2.R')
q5()
source('~/Coursera/GetDataQuiz2.R')
q5()
?read.fwf
?panel.lmline
library("lattice", lib.loc="C:/Program Files/R/R-3.1.2/library")
?panel.lmline
?axis
?lines
?points
?lattice.points
?lattice.lines
lattice.axis
?lattice.axis
?xyplot
?trellis.par.set
?ggplot
library("ggplot2", lib.loc="~/R/win-library/3.1")
?ggplot
?geom_smooth
?transform
install.packages("UsingR")
library("UsingR")
help("UsingR")
??UsingR
?hist
?gl
print(gl(2,1,10))
print(gl(2,3,10))
print(gl(3,3,10))
print(gl(3,3,10,labels=c("a","b","c")))
print(gl(2,3,10,labels=c("a","b")))
library(help="stats")
?qplot
library("ggplot2", lib.loc="~/R/win-library/3.1")
?qplot
?binwidth
??binwidth
help("binwidth")
library(help="binwidth")
example(binwidth)
??binwidth
?alpha
?qplot
?expression
?readRDS
rep(c(1,0),each=5)
rep(c(1,0),5)
?colorRamp
install.packages("RColorBrewer")
install.packages("colorspace")
library(help="colorspace")
R.version.string
install.packages("swirl")
library("swirl")
install_from_swirl("Getting and Cleaning Data")
swirl()
?barpolt
??barplot
??aggregate
?tapply
v <- c(3,2,1)
c <- as.character(v)
c
grep(c,"1")
grep("1",c)
v <- c(3,2,1,1,2,1)
c <- as.character(v)
grep(c,"1")
grep("1",c)
?transform
install.packages("stringr")
install.packages("lubridate")
?strsplit
source('~/Coursera/GettingDataCourse/GetDataQuiz4.R')
if(!file.exists("IdahoHousingSurvey.csv"))
download.file (url="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
,dest = "IdahoHousingSurvey.csv" )
IHD <- read.csv("IdahoHousingSurvey.csv")
namesv <- names(IHD)
namess <- strsplit(namesv,"wgtp")
namess
namess <- strsplit(namesv,"wgtp",fixed=T)
namess
namess[123]
if(!file.exists("GDPD.csv"))
download.file(url="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
,dest = "GDPD.csv")
GDPD <- read.csv("GDPD.csv")
head(GDPD)
gsub(",","",GDPD$X.3)
head(GDPD)
GDPD$X.3 <- gsub(",","",GDPD$X.3)
head(GDPD)
rename(GDPD,x.2 = "Economy")
library("dplyr")
rename(GDPD,x.2 = "Economy")
rename(GDPD,X.2 = "Economy")
??rename
rename(GDPD,X.2 = Economy)
rename(GDPD,X.2 = economy,X.3 = gdp.numbers)
rename(GDPD, economy = X.2, gdp.numbers =X.3)
head(GDPD)
GDPD <- GDPD[-(1:4),]
head(GDPD)
summary (GDPD$X.4)
mean(as.numeric(GDPD.X.3),na.rm=T)
mean(as.numeric(GDPD$X.3),na.rm=T)
as.numeric(GDPD$X.3)
?as.numeric
tail(GDPD)
mean(as.numeric(GDPD$X.3),na.rm=T)
mean(as.numeric(GDPD$X.3[1:199]),na.rm=T)
grep("^United",GDPD$X.2)
head(GDPD)
GDPD <- GDPD[,!is.na(Gross.domestic.product.2012)]
mean(as.numeric(GDPD$X.3),na.rm=T)
head(GDPD)
tail(GDPD)
library(kernlab)
library('kernlab')
library("kernlab")
load.packages("kernlab")
? Load.packages
?? Load.packages
download.packages("kernlab")
install.packages("kernlab")
?t
?dist
?reformulate
help("stats")
library(help = "stats")
?reformulate
??reformulate
reformulate(c("abc","ABC","a.b.c"),null)
reformulate(c("abc","ABC","a.b.c"),response = NULL)
reformulate(c("abc","ABC","abc"),response = NULL)
reformulate(c("abc","ABC","abc"),response = "numType")
reformulate(c("abc","ABC","abc"))
class(reformulate(c("abc","ABC","abc")))
?formula
?glm
glm(reformulate(c("abc","ABC","abc")))
?cv
??cv
qt(.95,9)
qnorm(.95,9)
qnorm(.95)
qt(.95,8)
qt(.975,8)
qt(.975,18)
qnorm(.975)
qt(.975,111.327)
qt(.95,16)
library("swirl", lib.loc="~/R/win-library/3.1")
install_from_swirl("Statistical Inference")
swirl()
33/36
deck
52
4/52
0
12/52
2/51
.8
.64
.64
mypdf
integrate(mypdf,lower=0,upper=1.6)
2^.5
?rexp
swirl
swirl()
swirl()
library("swirl", lib.loc="~/R/win-library/3.1")
rm(list=ls())
swirl()
0.00997
0.000997
0.000985
.984015
.014985
.000997/(.00097+.014985)
.0624
(.997*.001)/(.997*.001+.015*.999)
1/6*(1+2+3+4+5+6)
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
3.5
integrate(t^/2,lower=0,upper=2)
integrate(t^2/2,lower=0,upper=2)
integrate(myfunc,lower=0,upper=2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smeans)
dice_sqr
ex2_fair <- sum(dice_sqr*dice_fair)
ex2_fair - 3.5^2
sum(dice_sqr*dice_high)-edh
sum(dice_sqr*dice_high)-edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
.5/sqrt(10)
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
choose(5,3)*.8^3*.2^2+choose(5,4)*.8^4*.2*1+choose(5,5)*.8^5*.2^0
pbinom(size=5,quantile=2,prob=.8,lower.tail=FALSE)
?pbinom
pbinom(2,5,prob=.8,lower.tail=FALSE)
qnorm(.05)
qnorm(.1)
0
qnorm(97.5,3,2)
qnorm(97.5,mean=3,sd=2)
qnorm(.975,mean=3,sd=2)
3+2*1.96
pnorm(1200,mean=1020,sd=50)
pnorm(1200,mean=1020,sd=50,lower.tail=FALSE)
pnorm(((1200-1020)/50),lower.tail=FALSE)
pnorm((1200-1020)/50,lower.tail=FALSE)
qnorm(.75,mean=1020,sd=50,lower.tail=TRUE)
.53
.53
ppois(3,mean=2.5*4,lower.tail=TRUE,log.p=FALSE)
ppois(3,lambda=2.5,t=4,lower.tail=TRUE,log.p=FALSE)
ppois(3,lambda=2.5*4,lower.tail=TRUE,log.p=FALSE)
pbinom(5,1000,.01,lower.tail=TRUE,log.p=FALSE)
ppois(5,lambda=1000*.01,lower.tail=TRUE)
library("swirl", lib.loc="~/R/win-library/3.1")
swirl()
coinPlot(10)
coinPlot(10000)
qnorm(.95)
.6 +c(-1,1)*qnorm(.975)*sqrt(.6*(1-.6)/100)
.6 + c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
binom.test(60,100)$conf.int
mywald
mywald(.2)
ACCompar
ACCompar(20)
lamb <- 5/94.32
lamb +c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)&conf
poisson.test(5,94.32)$conf
library("swirl", lib.loc="~/R/win-library/3.1")
rm(list=ls())
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(.975,2)
myplot2(20)
sleep
range(g1)
range(g2)
difference <- g2-g1
mean(difference)
s <- sd(differnce)
s <- sd(difference)
mn + c(-1,1) * qt(.975,9) * s / sqrt(10)
t.test(difference)$conf.int
sp <- sqrt(7*15.34^2 + 20 * 18.23^2)
sp <- 7*15.34^2 + 20 * 18.23^2
ns <- 27
sp <- sqrt(sp/ns)
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8 + 1/21)
var(g1,g2,18)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
md+c(-1,1)*qt(.975,18)*sp * sqrt(1/10+1/10)
t.test(g2,g1,paired=FALSE,var.equal=TRUE)$conf
t.test(g2,g1,paired=TRUE)$conf
num <- (15.34^2/8 + 18.23^2/21)^2
den <-  ((15.34^2/8)^2)/7 + ((18.23^2/21)^2)/20
mydf <- num/den
qt(.975,mydf)
132.86-127.44 +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
library("swirl", lib.loc="~/R/win-library/3.1")
swirl()
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
qnorm(.95)
z <- qnorm(.95)
pnorm(31.6449,mean=30,lower.tail=F)
pnorm(30+z,mean=30,lower.tail=FALSE)
pnorm(30+z,mean=32,lower.tail=FALSE)
pnorm(30+z,mean=30,sd=1)
pnorm(30+z,mean=32,sd=1,lower.tail=FALSE)
pnorm(30+z*2,mean=32,sd=1,lower.tail=FALSE)
pnorm(30+z,mean=32,sd=2,lower.tail=FALSE)
pnorm(30+z*2,mean=32,sd=2,lower.tail=FALSE)
power.t.test(n=16,delta=2/4,sd=1,type="one.sample",alt="one.sided")$power
power.t.test(n=16,delta=2,sd=4,type="one.sample",alt="one.sided")$power
power.t.test(n=16,delta=100,sd=200,type="one.sample",alt="one.sided")$power
power.t.test(power=.8,delta=2/4,sd=1,type="one.sample",alt="one.sided")$n
power.t.test(power=.8,delta=2,sd=4,type="one.sample",alt="one.sided")$n
power.t.test(power=.8,delta=100,sd=200,type="one.sample",alt="one.sided")$n
power.t.test(power=.8,n=26,sd=1,type="one.sample",alt="one.sided")$delta
power.t.test(power=.8,n=27,sd=1,type="one.sample",alt="one.sided")$delta
head(pValues)
sum(pValues<.05)
sum(p.adjust(pValues,method="bonferroni")<.05)
sum(p.adjust(pValues,method="BH")<.05)
tail(trueStatus)
table(pValues2<.05,trueStatus)
24/500
table(p.adjust(pValues2,method="Bonferroni")<.05,trueStatus)
table(p.adjust(pValues2,method="bonferroni")<.05,trueStatus)
table(p.adjust(pValues2,method="BH")<.05,trueStatus)
0
samples = matrix(rep(0,40000),nrow=1000,byrow=T)
for (i in 1 : 1000) samples[i,] <- c( rexp(40,.2))
source('~/Coursera/Statistical-Inference/simulation.r')
source('~/Coursera/Statistical-Inference/ToothGrowth.R')
library("swirl", lib.loc="~/R/win-library/3.1")
sample
?sample
x <- c(1,2,3,4,5,6,1,2,3,4,5,6,1,2,1,1,5,5,6,6,6,3)
dim(x)
length(x)
y <- matrix(sample(x,22*7,replace=TRUE),7,22)
y
l <- cbind(rsum(y),rmean(y))
l <- cbind(rmean(y))
l <- rmean(y)
?rowmean
??rowsum
?rowmean
??rowmean
??rowMean
l <- cbind(colsum(y))
y
m <- apply(y,1,mean)
m
z <- matrix(sample(x,22*7,replace=FALSE),7,22)
x
y
sample
sample.int
?.Internal
n <- c(5,2,3,3)
m <- matrix(sample(n,n*2,replace=TRUE),2,4)
m <- matrix(sample(n,4*2,replace=TRUE),2,4)
m
?sample
swirl()
1*1/6+2*1/6+3*1/3+4*1/6+5*1/6+6*1/6
sum(1\:6)/6
sum(1:6)/6
print(g2)
head(sh)
nh
median(resampledMedians)
median(sh)
sam <- sample(fh,nh*B,replace=TRUE)
resam <- matrix(sam,B,nh)
meds <- apply(resam,1,median)
diff(median(fh),median(meds))
median(meds)-median(fh)
sd(meds)
sd(resampledMedians)
quantile(resampledMedians,c(.025,.975))
quantile(meds,c(.025,.975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
head(BCcounts)
BCcounts
group
testStat
obs <- testStat(BCcounts,group)
obs
mean(Bdata$count)-mean(Cdata$count)
sample(group)
perms <- sapply(1:10000,function(i) testStat(BCcounts,sample(group)))
mean(perms>obs)
hist(perms)
hist(obs)
obs
testStat(DEcounts,group)
perms <- sapply(1:10000,function(i) testStat(DEcounts,sample(group)))
install_from_swirl("Exploratory_Data_Analysis")
bye
bye()
quit()
library("swirl", lib.loc="~/R/win-library/3.1")
swirl()
swirl_install("Regression_Models")
install_from_swirl("Regression_Models")
swirl()
plot(child~parent,galton)
?jitter
plot(jitter(child,4)~parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline,lwd=3,col='red')
summary(regrline)
regrline <- lm("child"~parent,galton)
regrline <- lm("child~parent",galton)
fit <- lm("child~parent",galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals,galton$parent)
swirl()
Neveen
library("swirl", lib.loc="~/R/win-library/3.1")
swirl()
ols.ic <-fit$coef[1]
ols.slope <- fit$coef[2]
lhs - rhs
all.equal(rhs,lhs)
varChild <- var(OLS)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope,ols.ic))
all.equal(varChild,varRes+varEst)
efit <- lm(accel~mag+dist,attenu)
mean(efit$coef[1]-attenu$accel)
mean(efit$residuals)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
cor(gpa_nor,gch_nor)
l_nor <- lm(gch_nor~gpa_nor)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mu <- mean(x)
std <- sd(x)
xst <- (x-mu)/std
xst
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
?mse
??mse
?se
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mu <- mean(x)
mu
data(mtcars)
summary(mtcars)
lm(mtcars$mpg~mtcars$wt)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mu <- mean(x)
std <- sd(x)
xst <- (x-mu)/std
xst
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mu <- mean(x)
mu
rsconnect::setAccountInfo(name='neveen-mohamed', token='18371619DE65995DB05685D3CDB9929B', secret='wloVVqBshnK6yRejpPIG/RBf61IAQVLG6DFxtnvw')
q()
getwd()
setwd("C:/Users/Owner")
exit(0
exit()
quit()
source('C:/Users/Owner/.Rprofile')
.First <- function(){
.First <- function(){
rm(list=ls())
Sys.setenv("plotly_username"="N-A-M")
Sys.setenv("plotly_api_key"="7qqu10tm9h")
}
plotly:::verify("username")
install.packages("https://d396qusza40orc.cloudfront.net/devdataprod/DDPQuiz3_1.0.zip")
require(devtools)
install_github(https://d396qusza40orc.cloudfront.net/devdataprod/DDPQuiz3_1.0.zip)
setwd("~/")
setwd("~/Coursera/DataScience/DataProducts/Project/Cars MPG Predictors Presentation")
