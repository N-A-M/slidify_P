pnorm(1200,mean=1020,sd=50)
pnorm(1200,mean=1020,sd=50,lower.tail=FALSE)
pnorm(((1200-1020)/50),lower.tail=FALSE)
pnorm((1200-1020)/50,lower.tail=FALSE)
qnorm(.75,mean=1020,sd=50,lower.tail=TRUE)
.53
.53
ppois(3,mean=2.5*4,lower.tail=TRUE,log.p=FALSE)
ppois(3,lambda=2.5,t=4,lower.tail=TRUE,log.p=FALSE)
ppois(3,lambda=2.5*4,lower.tail=TRUE,log.p=FALSE)
pbinom(5,1000,.01,lower.tail=TRUE,log.p=FALSE)
ppois(5,lambda=1000*.01,lower.tail=TRUE)
library("swirl", lib.loc="~/R/win-library/3.1")
swirl()
coinPlot(10)
coinPlot(10000)
qnorm(.95)
.6 +c(-1,1)*qnorm(.975)*sqrt(.6*(1-.6)/100)
.6 + c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
binom.test(60,100)$conf.int
mywald
mywald(.2)
ACCompar
ACCompar(20)
lamb <- 5/94.32
lamb +c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)&conf
poisson.test(5,94.32)$conf
library("swirl", lib.loc="~/R/win-library/3.1")
rm(list=ls())
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(.975,2)
myplot2(20)
sleep
range(g1)
range(g2)
difference <- g2-g1
mean(difference)
s <- sd(differnce)
s <- sd(difference)
mn + c(-1,1) * qt(.975,9) * s / sqrt(10)
t.test(difference)$conf.int
sp <- sqrt(7*15.34^2 + 20 * 18.23^2)
sp <- 7*15.34^2 + 20 * 18.23^2
ns <- 27
sp <- sqrt(sp/ns)
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8 + 1/21)
var(g1,g2,18)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
md+c(-1,1)*qt(.975,18)*sp * sqrt(1/10+1/10)
t.test(g2,g1,paired=FALSE,var.equal=TRUE)$conf
t.test(g2,g1,paired=TRUE)$conf
num <- (15.34^2/8 + 18.23^2/21)^2
den <-  ((15.34^2/8)^2)/7 + ((18.23^2/21)^2)/20
mydf <- num/den
qt(.975,mydf)
132.86-127.44 +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
library("swirl", lib.loc="~/R/win-library/3.1")
swirl()
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
qnorm(.95)
z <- qnorm(.95)
pnorm(31.6449,mean=30,lower.tail=F)
pnorm(30+z,mean=30,lower.tail=FALSE)
pnorm(30+z,mean=32,lower.tail=FALSE)
pnorm(30+z,mean=30,sd=1)
pnorm(30+z,mean=32,sd=1,lower.tail=FALSE)
pnorm(30+z*2,mean=32,sd=1,lower.tail=FALSE)
pnorm(30+z,mean=32,sd=2,lower.tail=FALSE)
pnorm(30+z*2,mean=32,sd=2,lower.tail=FALSE)
power.t.test(n=16,delta=2/4,sd=1,type="one.sample",alt="one.sided")$power
power.t.test(n=16,delta=2,sd=4,type="one.sample",alt="one.sided")$power
power.t.test(n=16,delta=100,sd=200,type="one.sample",alt="one.sided")$power
power.t.test(power=.8,delta=2/4,sd=1,type="one.sample",alt="one.sided")$n
power.t.test(power=.8,delta=2,sd=4,type="one.sample",alt="one.sided")$n
power.t.test(power=.8,delta=100,sd=200,type="one.sample",alt="one.sided")$n
power.t.test(power=.8,n=26,sd=1,type="one.sample",alt="one.sided")$delta
power.t.test(power=.8,n=27,sd=1,type="one.sample",alt="one.sided")$delta
head(pValues)
sum(pValues<.05)
sum(p.adjust(pValues,method="bonferroni")<.05)
sum(p.adjust(pValues,method="BH")<.05)
tail(trueStatus)
table(pValues2<.05,trueStatus)
24/500
table(p.adjust(pValues2,method="Bonferroni")<.05,trueStatus)
table(p.adjust(pValues2,method="bonferroni")<.05,trueStatus)
table(p.adjust(pValues2,method="BH")<.05,trueStatus)
0
samples = matrix(rep(0,40000),nrow=1000,byrow=T)
for (i in 1 : 1000) samples[i,] <- c( rexp(40,.2))
source('~/Coursera/Statistical-Inference/simulation.r')
source('~/Coursera/Statistical-Inference/ToothGrowth.R')
library("swirl", lib.loc="~/R/win-library/3.1")
sample
?sample
x <- c(1,2,3,4,5,6,1,2,3,4,5,6,1,2,1,1,5,5,6,6,6,3)
dim(x)
length(x)
y <- matrix(sample(x,22*7,replace=TRUE),7,22)
y
l <- cbind(rsum(y),rmean(y))
l <- cbind(rmean(y))
l <- rmean(y)
?rowmean
??rowsum
?rowmean
??rowmean
??rowMean
l <- cbind(colsum(y))
y
m <- apply(y,1,mean)
m
z <- matrix(sample(x,22*7,replace=FALSE),7,22)
x
y
sample
sample.int
?.Internal
n <- c(5,2,3,3)
m <- matrix(sample(n,n*2,replace=TRUE),2,4)
m <- matrix(sample(n,4*2,replace=TRUE),2,4)
m
?sample
swirl()
1*1/6+2*1/6+3*1/3+4*1/6+5*1/6+6*1/6
sum(1\:6)/6
sum(1:6)/6
print(g2)
head(sh)
nh
median(resampledMedians)
median(sh)
sam <- sample(fh,nh*B,replace=TRUE)
resam <- matrix(sam,B,nh)
meds <- apply(resam,1,median)
diff(median(fh),median(meds))
median(meds)-median(fh)
sd(meds)
sd(resampledMedians)
quantile(resampledMedians,c(.025,.975))
quantile(meds,c(.025,.975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
head(BCcounts)
BCcounts
group
testStat
obs <- testStat(BCcounts,group)
obs
mean(Bdata$count)-mean(Cdata$count)
sample(group)
perms <- sapply(1:10000,function(i) testStat(BCcounts,sample(group)))
mean(perms>obs)
hist(perms)
hist(obs)
obs
testStat(DEcounts,group)
perms <- sapply(1:10000,function(i) testStat(DEcounts,sample(group)))
install_from_swirl("Exploratory_Data_Analysis")
bye
bye()
quit()
library("swirl", lib.loc="~/R/win-library/3.1")
swirl()
swirl_install("Regression_Models")
install_from_swirl("Regression_Models")
swirl()
plot(child~parent,galton)
?jitter
plot(jitter(child,4)~parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline,lwd=3,col='red')
summary(regrline)
regrline <- lm("child"~parent,galton)
regrline <- lm("child~parent",galton)
fit <- lm("child~parent",galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals,galton$parent)
swirl()
Neveen
library("swirl", lib.loc="~/R/win-library/3.1")
swirl()
ols.ic <-fit$coef[1]
ols.slope <- fit$coef[2]
lhs - rhs
all.equal(rhs,lhs)
varChild <- var(OLS)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope,ols.ic))
all.equal(varChild,varRes+varEst)
efit <- lm(accel~mag+dist,attenu)
mean(efit$coef[1]-attenu$accel)
mean(efit$residuals)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
cor(gpa_nor,gch_nor)
l_nor <- lm(gch_nor~gpa_nor)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mu <- mean(x)
std <- sd(x)
xst <- (x-mu)/std
xst
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
?mse
??mse
?se
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mu <- mean(x)
mu
data(mtcars)
summary(mtcars)
lm(mtcars$mpg~mtcars$wt)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mu <- mean(x)
std <- sd(x)
xst <- (x-mu)/std
xst
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mu <- mean(x)
mu
rsconnect::setAccountInfo(name='neveen-mohamed', token='18371619DE65995DB05685D3CDB9929B', secret='wloVVqBshnK6yRejpPIG/RBf61IAQVLG6DFxtnvw')
q()
getwd()
setwd("C:/Users/Owner")
exit(0
exit()
quit()
source('C:/Users/Owner/.Rprofile')
.First <- function(){
.First <- function(){
rm(list=ls())
Sys.setenv("plotly_username"="N-A-M")
Sys.setenv("plotly_api_key"="7qqu10tm9h")
}
plotly:::verify("username")
install.packages("https://d396qusza40orc.cloudfront.net/devdataprod/DDPQuiz3_1.0.zip")
require(devtools)
install_github(https://d396qusza40orc.cloudfront.net/devdataprod/DDPQuiz3_1.0.zip)
---
Data(BJsales)
head(BJsales)
Data(chickwts)
head(chickwts)
str(chickwts)
chickwts
plot(weight~feed)
plot(weight~feed,dataset=chickwts)
plot(y=weight,x=feed,dataset=chickwts)
?plot
qplot(y=weight,x=feed,dataset=chickwts)
library(ggplot2)
qplot(y=weight,x=feed,dataset=chickwts)
qplot(y=weight,x=feed,data=chickwts)
boxplot(y=weight,x=feed,data=chickwts)
?boxplot
boxplot(y~x,x=feed,data=chickwts)
boxplot(y~x,x=chickwts$feed,data=chickwts)
boxplot(y~x,x=factor(chickwts$feed),data=chickwts)
Data(EuStockMarkets)
str(EuStockMarkets)
Data(state)	#US State Facts and Figures
str(state)
library(datasets)
Data(state)	#US State Facts and Figures
str(state)
Data(state.abb)	#US State Facts and Figures
Data(state.area)	#US State Facts and Figures
Data(state.center)	#US State Facts and Figures
Data(state.division)	#US State Facts and Figures
Data(state.name)	#US State Facts and Figures
Data(state.region)	#US State Facts and Figures
Data(state.x77)
library(datasets)
Data(state)	#US State Facts and Figures
str(state)
Data(state.abb)	#US State Facts and Figures
Data(state.area)	#US State Facts and Figures
Data(state.center)	#US State Facts and Figures
Data(state.division)	#US State Facts and Figures
Data(state.name)	#US State Facts and Figures
Data(state.region)	#US State Facts and Figures
Data(state.x77)
library(help='datasets')
data(state)	#US State Facts and Figures
str(state)
head(state)
library(datasets)
library(help='datasets')
data(state)	#US State Facts and Figures
data.frame(state)
str(state)
state<-data.frame(state)
str(state)
help(state)
data(mtcars)
help(mtcars)
library(help=googleVis)
library(ggvis)
install_github("ggvis")
install.packages("ggvis")
shiny::runApp('Documents/Coursera/DataScience/DataProducts/Project')
library(help="ggvis")
shiny::runApp('Documents/Coursera/DataScience/DataProducts/Project')
?ggvis
??ggvis
?nPlot
require(rCharts)
?nPlot
??nPlot
?nplot
require("googleVis")
library(help="googleVis")
?gvisTreeMap
shiny::runApp('Documents/Coursera/DataScience/DataProducts/Project')
shiny::runApp('Documents/Coursera/DataScience/DataProducts/Project')
shiny::runApp('Documents/Coursera/DataScience/DataProducts/Project')
library(help=shiny)
shiny::runApp('Documents/Coursera/DataScience/DataProducts/Project')
data(mtcars)
help(mtcars)
df <- data.frame(mpg=mtcars$mpg
,cyl=as.factor(mtcars$cyl)
,disp
,hp=mtcars$hp
,drat
,wt
,qsec
,vs
,am
,carb
,gear=mtcars$gear
)
data(mtcars)
require("googleVis")
shinyServer(
function(input , output){
df <- data.frame(mpg=mtcars$mpg
,cyl=as.factor(mtcars$cyl)
,disp=mtcars$disp
,hp=mtcars$hp
,drat=mtcars$drat
,wt=mtcars$wt
,qsec=mtcars$qsec
,vs=mtcars$vs
,am=mtcars$am
,carb=mtcars$carb
,gear=mtcars$gear
tree1 <- gvisTreeMap(df)
output$newPlot<-plot(tree1)
}
)
shiny::runApp('Documents/Coursera/DataScience/DataProducts/Project')
shiny::runApp('Documents/Coursera/DataScience/DataProducts/Project')
?TreeMap
??TreeMap
library(caret)
?train
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
#dim(segmentationOriginal)
df <- data.frame(segmentationOriginal)
training <- df[df$Case=="Train",]
training <- training[,-2]
testing <- df[df$Case=="Test",]
testing <- testing[,-2]
set.seed(125)
md <- train(training[,-2],training$Class, method="rpart")
library("rattle")
library("googleVis")
gvisTreeMap(md$finalModel)
md$finalModel
fancyRpartPlot(md$finalModel)
?gvisScatterChart
shiny::runApp('Documents/Coursera/DataScience/DataProducts/Project')
df <- data.frame(mpg=mtcars$mpg
,cyl=as.factor(mtcars$cyl)
,disp=mtcars$disp
,hp=mtcars$hp
,drat=mtcars$drat
,wt=mtcars$wt
,qsec=mtcars$qsec
,vs=mtcars$vs
,am=mtcars$am
,carb=mtcars$carb
,gear=mtcars$gear
tree1 <- gvisScatterChart(df)
df
tree1 <- gvisScatterChart(df)
class(df)
rm(list=ls())
shiny::runApp('Documents/Coursera/DataScience/DataProducts/Project')
df <- data.frame(mpg=mtcars$mpg
,cyl=as.factor(mtcars$cyl)
,disp=mtcars$disp
,hp=mtcars$hp
,drat=mtcars$drat
,wt=mtcars$wt
,qsec=mtcars$qsec
,vs=mtcars$vs
,am=mtcars$am
,carb=mtcars$carb
,gear=mtcars$gear
tree1 <- gvisScatterChart(df)
tree1 <- gvisScatterChart(df)
view(df)
View(df)
shiny::runApp('Documents/Coursera/DataScience/DataProducts/Project')
shiny::runApp('Documents/Coursera/DataScience/DataProducts/Project')
shiny::runApp('Documents/Coursera/DataScience/DataProducts/Project')
shiny::runApp('Documents/Coursera/DataScience/DataProducts/Project')
shiny::runApp('Documents/Coursera/DataScience/DataProducts/Project')
shiny::runApp('Documents/Coursera/DataScience/DataProducts/Project')
shiny::runApp('Documents/Coursera/DataScience/DataProducts/Project')
shiny::runApp('Documents/Coursera/DataScience/DataProducts/Project')
shiny::runApp('Documents/Coursera/DataScience/DataProducts/Project')
shiny::runApp('Documents/Coursera/DataScience/DataProducts/Project')
shiny::runApp('Documents/Coursera/DataScience/DataProducts/Project')
shiny::runApp('Documents/Coursera/DataScience/DataProducts/Project')
shiny::runApp('Documents/Coursera/DataScience/DataProducts/Project')
shiny::runApp('Documents/Coursera/DataScience/DataProducts/Project')
shiny::runApp('Documents/Coursera/DataScience/DataProducts/Project')
function(input , output){
df <- data.frame(mpg=mtcars$mpg
,disp=mtcars$disp
,hp=mtcars$hp
,drat=mtcars$drat
,wt=mtcars$wt
,qsec=mtcars$qsec
,vs=mtcars$vs
,am=mtcars$am
,carb=mtcars$carb
,gear=mtcars$gear
)
output$newPlot <- renderGvis({gvisScatterChart(df, options=list(width=400, height=450))})
shiny::runApp('Documents/Coursera/DataScience/DataProducts/Project')
shiny::runApp('Documents/Coursera/DataScience/DataProducts/Project')
shiny::runApp('Documents/Coursera/DataScience/DataProducts/Project')
shiny::runApp('Documents/Coursera/DataScience/DataProducts/Project')
runGist()
setwd("~/Coursera/DataScience/DataProducts/Project")
shiny::runApp()
runApp()
runGist(4970975)
shiny::runApp()
shiny::runApp()
?gvisScatterChart
?checkboxInput
?helpText
shiny::runApp()
?checkboxGroupInput
?headerPanel
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?data.frame
?reactive
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
input$params
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
str(df)
mtcars
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(rsconnect)
deployApp()
---
?validate
?R.options
??R.options
publish(title = 'MPG predictors by Neveen', 'index.html', host = 'rpubs')
??publish
publish_rpubs(title = 'MPG predictors by Neveen', 'index.html')
library(slidify)
publish_rpubs(title = 'MPG predictors by Neveen', 'index.html')
setwd("~/Coursera/DataScience/DataProducts/Project/Cars MPG Predictors Presentation")
publish_rpubs(title = 'MPG predictors by Neveen', 'index.html')
publish_github(title = 'MPG predictors by Neveen', 'index.html')
